(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{159:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),u=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,h=p["".concat(r,".").concat(b)]||p[b]||d[b]||o;return n?i.a.createElement(h,l(l({ref:t},c),{},{components:n})):i.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(3),i=n(7),o=(n(0),n(159)),r={id:"eventually",title:"Eventually",slug:"eventually.html"},l={unversionedId:"framework/concurrency/eventually",id:"framework/concurrency/eventually",isDocsHomePage:!1,title:"Eventually",description:"Starting with Kotest 4.6, a new experimental module has been added which contains improved",source:"@site/docs/framework/concurrency/eventually.md",slug:"/framework/concurrency/eventually.html",permalink:"/docs/framework/concurrency/eventually.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/concurrency/eventually.md",version:"current",sidebar:"framework",previous:{title:"Custom Test Names",permalink:"/docs/framework/datatesting/custom-test-names.html"},next:{title:"Continually",permalink:"/docs/assertions/continually.html"}},s=[{value:"API",id:"api",children:[]},{value:"Configuration",id:"configuration",children:[{value:"Durations and Intervals",id:"durations-and-intervals",children:[]},{value:"Initial Delay",id:"initial-delay",children:[]},{value:"Retries",id:"retries",children:[]},{value:"Specifying the exceptions to trap",id:"specifying-the-exceptions-to-trap",children:[]},{value:"Predicates",id:"predicates",children:[]},{value:"Listeners",id:"listeners",children:[]},{value:"Sharing configuration",id:"sharing-configuration",children:[]}]}],c={rightToc:s};function u(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"New improved module")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Starting with Kotest 4.6, a new experimental module has been added which contains improved\nutilities for testing concurrent, asynchronous, or non-deterministic code. This module\nis ",Object(o.b)("inlineCode",{parentName:"p"},"kotest-framework-concurrency")," and is intended as a long term replacement for the previous module. The previous\nutilities are still available as part of the core framework."))),Object(o.b)("p",null,"Testing non-deterministic code can be hard. You might need to juggle threads, timeouts, race conditions, and the\nunpredictability of when events are happening."),Object(o.b)("p",null,"For example, if you were testing that an asynchronous file write was completed successfully, you need to wait until the\nwrite operation has completed and flushed to disk."),Object(o.b)("p",null,"Some common approaches to these problems are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Using callbacks which are invoked once the operation has completed. The callback can be then used to assert that the\nstate of the system is as we expect. But not all operations provide callback functionality.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Block the thread using ",Object(o.b)("inlineCode",{parentName:"p"},"Thread.sleep")," or suspend a function using ",Object(o.b)("inlineCode",{parentName:"p"},"delay"),", waiting for the operation to complete.\nThe sleep threshold needs to be set high enough to be sure the operations will have completed on a fast or slow machine, and\neven when complete, the thread will stay blocked until the timeout has expired.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use a loop with a sleep and retry and a sleep and retry, but then you need to write boilerplate to track number of\niterations, handle certain exceptions and fail on others, ensure the total time taken has not exceeded the max and so\non.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Use countdown latches and block threads until the latches are released by the non-determistic operation. This can\nwork well if you are able to inject the latches in the appropriate places, but just like callbacks, it isn't always\npossible to have the code to be tested integrate with a latch."))),Object(o.b)("p",null,"As an alternative to the above solutions, kotest provides the ",Object(o.b)("inlineCode",{parentName:"p"},"eventually")," utility which solves the common use case of\n",Object(o.b)("em",{parentName:"p"},'"',Object(o.b)("strong",{parentName:"em"},"I expect this code to pass after a short period of time"),'"'),"."),Object(o.b)("p",null,"Eventually does this by periodically invoking a given lambda until the timeout is eventually reached or too many iterations have passed. This is\nflexible and is perfect for testing nondeterministic code. Eventually can be customized in regardless to the types of\nexceptions to handle, how the lambda is considered a success or failure, with a listener, and so on."),Object(o.b)("h2",{id:"api"},"API"),Object(o.b)("p",null,"There are two ways to use eventually. The first is simply providing a duration in either milliseconds\n(or using the Kotlin ",Object(o.b)("inlineCode",{parentName:"p"},"Duration")," type) followed by the code that should eventually pass without an exception being raised."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually(5000) { // duration in millis\n  userRepository.getById(1).name shouldBe "bob"\n}\n')),Object(o.b)("p",null,"The second is by providing a configuration block before the test code. This method should be used when you need to\nset more options than just the duration."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually({\n  duration = 5000\n  interval = 1000.fixed()\n}) {\n  userRepository.getById(1).name shouldBe "bob"\n}\n')),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("h3",{id:"durations-and-intervals"},"Durations and Intervals"),Object(o.b)("p",null,"The duration is the total amount of time to keep trying to pass the test. The ",Object(o.b)("inlineCode",{parentName:"p"},"interval")," however allows us to\nspecify how often the test should be attempted. So if we set duration to 5 seconds, and interval to 250 millis,\nthen the test would be attempted at most ",Object(o.b)("inlineCode",{parentName:"p"},"5000 / 250 = 20")," times."),Object(o.b)("h3",{id:"initial-delay"},"Initial Delay"),Object(o.b)("p",null,"Usually ",Object(o.b)("inlineCode",{parentName:"p"},"eventually")," starts executing the test block immediately, but we can add an initial delay before the first\niteration using ",Object(o.b)("inlineCode",{parentName:"p"},"initialDelay"),", such as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually({\n  duration = 5000\n  initialDelay = 1000\n}) {\n  userRepository.getById(1).name shouldBe "bob"\n}\n')),Object(o.b)("h3",{id:"retries"},"Retries"),Object(o.b)("p",null,"In addition to bounding the number of invocations by time, we can do so by iteration count. In the following example\nwe retry the operation 10 times, or until 8 seconds has expired."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually({\n  duration = 8000\n  retries = 10\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe "bob"\n}\n')),Object(o.b)("h3",{id:"specifying-the-exceptions-to-trap"},"Specifying the exceptions to trap"),Object(o.b)("p",null,"By default, ",Object(o.b)("inlineCode",{parentName:"p"},"eventually")," will ignore any ",Object(o.b)("inlineCode",{parentName:"p"},"AssertionError")," that is thrown inside the function (note, that means it won't\ncatch ",Object(o.b)("inlineCode",{parentName:"p"},"Error"),"). If you want to be more specific, you can tell ",Object(o.b)("inlineCode",{parentName:"p"},"eventually")," to ignore specific exceptions and any others\nwill immediately fail the test."),Object(o.b)("p",null,"For example, when testing that a user should exist in the database, a ",Object(o.b)("inlineCode",{parentName:"p"},"UserNotFoundException")," might be thrown\nif the user does not exist. We know that eventually that user will exist. But if an ",Object(o.b)("inlineCode",{parentName:"p"},"IOException")," is thrown, we don't\nwant to keep retrying as this indicates a larger issue than simply timing."),Object(o.b)("p",null,"We can do this by specifying that ",Object(o.b)("inlineCode",{parentName:"p"},"UserNotFoundException")," is an exception to suppress."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually({\n  duration = 8000\n  suppressExceptions = setOf(UserNotFoundException::class)\n}) {\n  userRepository.getById(1).name shouldNotBe "bob"\n}\n')),Object(o.b)("p",null,"As an alternative to passing in a set of exceptions, we can provide a function which is invoked, passing in the throw\nexception. This function should return true if the exception should be handled, or false if the exception should bubble out."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually({\n  duration = 8000\n  suppressExceptionIf = { it is UserNotFoundException && it.username == "bob" }\n}) {\n  userRepository.getById(1).name shouldNotBe "bob"\n}\n')),Object(o.b)("h3",{id:"predicates"},"Predicates"),Object(o.b)("p",null,"In addition to verifying a test case eventually runs without throwing an exception, we can also verify that the\nreturn value of the test is as expected - and if not, consider that iteration a failure and try again."),Object(o.b)("p",null,'For example, here we continue to append "x" to a string until the result of the previous iteration is equal to "xxx".'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'var string = "x"\n\neventually({\n  duration = 5.seconds()\n  predicate = { it.result == "xxx" }\n}) {\n  string += "x"\n  string\n}\n')),Object(o.b)("h3",{id:"listeners"},"Listeners"),Object(o.b)("p",null,"We can attach a listener, which will be invoked on each iteration, with the state of that iteration. The state object\ncontains the last exception, last value, iteration count and so on."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'eventually({\n  duration = 5.seconds()\n  listener = { println("iteration ${it.times} returned ${it.result}") }\n}) {\n  string += "x"\n  string\n}\n')),Object(o.b)("h3",{id:"sharing-configuration"},"Sharing configuration"),Object(o.b)("p",null,"Sharing the configuration for eventually is a breeze with the ",Object(o.b)("inlineCode",{parentName:"p"},"EventuallyConfig"),' data class. Suppose you have classified the\noperations in your system to "slow" and "fast" operations. Instead of remembering which timing values were for slow and\nfast we can set up some objects to share between tests and customize them per suite. This is also a perfect time to show\noff the listener capabilities of ',Object(o.b)("inlineCode",{parentName:"p"},"eventually")," which give you insight into the current value of the result of your\nproducer and the state of iterations!"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'val slow = EventuallyConfig<ServerResponse>(\n  duration = 5.minutes,\n  interval = 25.milliseconds.fibonacci(),\n  suppressExceptions = setOf(ServerException::class)\n)\n\nclass FooTests : StringSpec({\n  val logger = logger("FooTests")\n  val fSlow = slow.copy(listener = { i, t -> logger.info("Current $i after {${t.times} attempts") })\n\n  "server eventually provides a result for /foo" {\n    eventually(fSlow) {\n      fooApi()\n    }\n  }\n})\n\nclass BarTests : StringSpec({\n  val logger = logger("BarTests")\n  val bFast = fast.copy(listener = { i, t -> logger.info("Current $i after {${t.times} attempts") })\n\n  "server eventually provides a result for /bar" {\n    eventually(bFast) {\n      barApi()\n    }\n  }\n})\n\n')),Object(o.b)("p",null,"Here we can see sharing of configuration can be useful to reduce duplicate code while allowing flexibility for things\nlike custom logging per test suite for clear test logs."))}u.isMDXComponent=!0}}]);