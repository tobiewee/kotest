(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{159:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||b[m]||o;return n?a.a.createElement(f,s(s({ref:t},l),{},{components:n})):a.a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},205:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/intro_gif-41d4e868847b330dec1c3b60e500b4fb.gif"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(159)),i={id:"index",title:"Introduction",slug:"framework.html"},s={unversionedId:"framework/index",id:"framework/index",isDocsHomePage:!1,title:"Introduction",description:"introgif",source:"@site/docs/framework/index.md",slug:"/framework/framework.html",permalink:"/docs/framework/framework.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/index.md",version:"current",sidebar:"framework",next:{title:"Writing Tests",permalink:"/docs/framework/writing-tests.html"}},c=[{value:"Test with Style",id:"test-with-style",children:[]},{value:"Check all the Tricky Cases With Data Driven Testing",id:"check-all-the-tricky-cases-with-data-driven-testing",children:[]},{value:"Fine Tune Test Execution",id:"fine-tune-test-execution",children:[]}],l={rightToc:c};function u(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("img",{alt:"intro_gif",src:n(205).default})),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://search.maven.org/search?q=g:io.kotest%20OR%20g:io.kotest.extensions"}),Object(o.b)("img",Object(r.a)({parentName:"a"},{src:"https://img.shields.io/maven-central/v/io.kotest/kotest-framework-engine.svg?label=release",alt:"version badge"}))),"\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://oss.sonatype.org/content/repositories/snapshots/io/kotest/"}),Object(o.b)("img",Object(r.a)({parentName:"a"},{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/io.kotest/kotest-framework-engine.svg?label=snapshot",alt:"version badge"})))),Object(o.b)("h2",{id:"test-with-style"},"Test with Style"),Object(o.b)("p",null,"Write ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/framework/writing-tests.html"}),"simple and beautiful tests")," using one of the available styles:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'class MyTests : StringSpec({\n   "length should return size of string" {\n      "hello".length shouldBe 5\n   }\n   "startsWith should test for a prefix" {\n      "world" should startWith("wor")\n   }\n})\n')),Object(o.b)("p",null,"Kotest allows tests to be created in several styles, so you can choose the style that suits you best."),Object(o.b)("h2",{id:"check-all-the-tricky-cases-with-data-driven-testing"},"Check all the Tricky Cases With Data Driven Testing"),Object(o.b)("p",null,"Handle even an enormous amount of input parameter combinations easily with ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/framework/datatesting/data-driven-testing.html"}),"data driven tests"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'class StringSpecExample : StringSpec({\n   "maximum of two numbers" {\n      forAll(\n         row(1, 5, 5),\n         row(1, 0, 1),\n         row(0, 0, 0)\n      ) { a, b, max ->\n         Math.max(a, b) shouldBe max\n      }\n   }\n})\n')),Object(o.b)("h2",{id:"fine-tune-test-execution"},"Fine Tune Test Execution"),Object(o.b)("p",null,"You can specify the number of invocations, parallelism, and a timeout for each test or for all tests. And you can group\ntests by tags or disable them conditionally. All you need is ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/framework/project-config.html"}),Object(o.b)("inlineCode",{parentName:"a"},"config")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'class MySpec : StringSpec({\n   "should use config".config(timeout = 2.seconds, invocations = 10, threads = 2, tags = setOf(Database, Linux)) {\n      // test here\n   }\n})\n')))}u.isMDXComponent=!0}}]);