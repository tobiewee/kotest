(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{159:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(s,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(m,i(i({ref:t},l),{},{components:n})):a.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},160:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},167:function(e,t,n){"use strict";var r=n(0),a=n(168);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},168:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a},183:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(167),s=n(160),i=n(52),c=n.n(i),l=37,p=39;t.a=function(e){var t=e.lazy,n=e.block,i=e.children,u=e.defaultValue,b=e.values,d=e.groupId,m=e.className,f=Object(o.a)(),h=f.tabGroupChoices,y=f.setTabGroupChoices,g=Object(r.useState)(u),O=g[0],j=g[1];if(null!=d){var v=h[d];null!=v&&v!==O&&b.some((function(e){return e.value===v}))&&j(v)}var w=function(e){j(e),null!=d&&y(d,e)},k=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n},m)},b.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(s.a)("tabs__item",c.a.tabItem,{"tabs__item--active":O===t}),key:t,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case p:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case l:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(k,e.target,e)},onFocus:function(){return w(t)},onClick:function(){w(t)}},n)}))),t?Object(r.cloneElement)(i.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},i.map((function(e,t){return Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}},184:function(e,t,n){"use strict";var r=n(3),a=n(0),o=n.n(a);t.a=function(e){var t=e.children,n=e.hidden,a=e.className;return o.a.createElement("div",Object(r.a)({role:"tabpanel"},{hidden:n,className:a}),t)}},65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(159)),s=n(183),i=n(184),c={id:"index",title:"Property-based Testing",slug:"property-based-testing.html",sidebar_label:"Introduction"},l={unversionedId:"proptest/index",id:"proptest/index",isDocsHomePage:!1,title:"Property-based Testing",description:"Kotest is split into several subprojects which can be used independently. One of these subprojects is the property test framework.",source:"@site/docs/proptest/index.mdx",slug:"/proptest/property-based-testing.html",permalink:"/docs/proptest/property-based-testing.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/index.mdx",version:"current",sidebar_label:"Introduction",sidebar:"proptest",next:{title:"Property Test Functions",permalink:"/docs/proptest/property-test-functions.html"}},p=[{value:"What is Property Testing?",id:"what-is-property-testing",children:[]},{value:"Getting Started",id:"getting-started",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],u={rightToc:p};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Kotest is split into several subprojects which can be used independently. One of these subprojects is the property test framework.\nYou do ",Object(o.b)("strong",{parentName:"p"},"not")," need to be using Kotest as your test framework (although you should!) to benefit from the property test support."),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://search.maven.org/search?q=g:io.kotest"}),Object(o.b)("img",Object(r.a)({parentName:"a"},{src:"https://img.shields.io/maven-central/v/io.kotest/kotest-property.svg?label=release",alt:"version badge"}))),"\n",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://oss.sonatype.org/content/repositories/snapshots/io/kotest/"}),Object(o.b)("img",Object(r.a)({parentName:"a"},{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/io.kotest/kotest-framework-engine.svg?label=snapshot",alt:"version badge"})))),Object(o.b)("h2",{id:"what-is-property-testing"},"What is Property Testing?"),Object(o.b)("p",null,"Developers typically write example-based tests. These are your garden variety unit tests you know and love.\nYou provide some inputs, and some expected results, and a test framework like Kotest or JUnit checks that the actual\nresults meet the expectations."),Object(o.b)("p",null,"One problem with this approach is that it is very easy to miss errors due to edge cases that the developer didn't think about,\nor lack of coverage in the chosen inputs. Instead, with property testing, hundreds or thousands of values are fed into the same test,\nand the values are (usually) randomly generated by your property test framework."),Object(o.b)("p",null,"For example, a good property test framework will include values like negative infinity, empty lists, strings with non-ascii characters, and so on.\nThings we often forget about when writing example based tests."),Object(o.b)("p",null,"Property tests were originally conceived in frameworks like Quickcheck with the notion of testing a ",Object(o.b)("em",{parentName:"p"},"property")," on some object,\nie. something that should hold true for all inputs. An invariant in other words.  An example of an invariant is given two strings,\na and b, then ",Object(o.b)("em",{parentName:"p"},"length(a + b)")," should always be equal to ",Object(o.b)("em",{parentName:"p"},"length(a) + length(b)"),"."),Object(o.b)("p",null,"That is where the term ",Object(o.b)("em",{parentName:"p"},"property testing")," originates."),Object(o.b)("p",null,"However, you do not have to use property tests to only test things like monad laws or basic numeric functions. Any test that\nwould benefit from a wide array of input values is a good candidate."),Object(o.b)("h2",{id:"getting-started"},"Getting Started"),Object(o.b)("p",null,"The property test framework is supported on all targets."),Object(o.b)(s.a,{defaultValue:"JVM/Gradle",values:[{label:"JVM/Gradle",value:"JVM/Gradle"},{label:"JVM/Maven",value:"JVM/Maven"},{label:"Multiplatform",value:"Multiplatform"}],mdxType:"Tabs"},Object(o.b)(i.a,{value:"JVM/Gradle",mdxType:"TabItem"},Object(o.b)("p",null,"Add the following dependency to your build:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'dependencies {\n   testImplementation("io.kotest:kotest-property:$version")\n}\n'))),Object(o.b)(i.a,{value:"JVM/Maven",mdxType:"TabItem"},Object(o.b)("p",null,"Add the following dependency to your build."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-xml"}),"<dependency>\n   <groupId>io.kotest</groupId>\n   <artifactId>kotest-property-jvm</artifactId>\n   <version>${version}</version>\n   <scope>test</scope>\n</dependency>\n"))),Object(o.b)(i.a,{value:"Multiplatform",mdxType:"TabItem"},Object(o.b)("p",null,"   Add the following dependency to your ",Object(o.b)("inlineCode",{parentName:"p"},"commonTest")," sourceset:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'kotlin {\n  sourceSets {\n    val commonTest by getting {\n      dependencies {\n        implementation("io.kotest:kotest-property:$version")\n      }\n    }\n  }\n}\n')),Object(o.b)("p",null,"Alternatively, add the dependency to a specific target.\nFor example, we could add to the Javascript target only be using the ",Object(o.b)("inlineCode",{parentName:"p"},"jsTest")," sourceset."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),'kotlin {\n   targets {\n      js {\n         browser()\n         nodejs()\n      }\n   }\n   sourceSets {\n      val jsTest by getting {\n         dependencies {\n            implementation("io.kotest:kotest-property:$version")\n         }\n      }\n   }\n}\n')))),Object(o.b)("h2",{id:"next-steps"},"Next Steps"),Object(o.b)("p",null,"To create input values for tests, Kotest uses the term ",Object(o.b)("em",{parentName:"p"},"generator"),". One generator per input argument is passed to a ",Object(o.b)("em",{parentName:"p"},"test function"),",\nand the test will execute for a set number of ",Object(o.b)("em",{parentName:"p"},"iterations"),"."),Object(o.b)("p",null,"Read more about"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"How ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/proptest/property-test-functions.html"}),"test functions")," are used."),Object(o.b)("li",{parentName:"ul"},"The different types of ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/proptest/property-test-generators.html"}),"generators")," and ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/proptest/generator-operations.html"}),"operations")," on them."),Object(o.b)("li",{parentName:"ul"},"How to write a ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/proptest/custom-generators.html"}),"custom generator"),"."),Object(o.b)("li",{parentName:"ul"},"How to specify ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/proptest/property-test-config.html"}),"config")," for a test, including the seed.")))}b.isMDXComponent=!0}}]);