(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{131:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),i=(a(0),a(159)),s={id:"introduction",title:"Introduction",slug:"data-driven-testing.html"},o={unversionedId:"framework/datatesting/introduction",id:"framework/datatesting/introduction",isDocsHomePage:!1,title:"Introduction",description:"This section covers the new and improved data test support that was released with Kotest 4.6.0. Before it can be used,",source:"@site/docs/framework/datatesting/data_driven_testing.md",slug:"/framework/datatesting/data-driven-testing.html",permalink:"/docs/framework/datatesting/data-driven-testing.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/data_driven_testing.md",version:"current",sidebar:"framework",previous:{title:"Testing Exceptions",permalink:"/docs/framework/exceptions.html"},next:{title:"Nested Data Tests",permalink:"/docs/framework/datatesting/nested-tests.html"}},c=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Stable Names",id:"stable-names",children:[]}],l={rightToc:c};function p(e){var t=e.components,s=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"This section covers the new and improved data test support that was released with Kotest 4.6.0. Before it can be used,\nyou need to add the module ",Object(i.b)("inlineCode",{parentName:"p"},"kotest-framework-datatest")," to your build."),Object(i.b)("p",{parentName:"div"},"This new module is currently under experimental stage and uses ",Object(i.b)("inlineCode",{parentName:"p"},"ExperimentalKotest")," annotation which means in your tests\nyou might get warning regarding usage of ",Object(i.b)("inlineCode",{parentName:"p"},"ExperimentalKotest"),", in case you do not want this warning you will need to use\neither ",Object(i.b)("inlineCode",{parentName:"p"},"@OptIn(ExperimentalKotest::class)")," or ",Object(i.b)("inlineCode",{parentName:"p"},"@ExperimentalKotest")," annotation at your test method or test class.\nAlong with that you will have to pass ",Object(i.b)("inlineCode",{parentName:"p"},"-Xopt-in=kotlin.RequiresOptIn")," compiler argument to your kotlin compiler using your build\ntool. In future release when this module will become more stable we will remove this ",Object(i.b)("inlineCode",{parentName:"p"},"@ExperimentalKotest"),"."),Object(i.b)("p",{parentName:"div"},"To view the documentation for the previous data test support, ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/framework/datatesting/data_driven_testing_4.2.0"}),"click here")))),Object(i.b)("p",null,"When writing tests that are logic based, one or two specific code paths that work through particular scenarios make\nsense. Other times we have tests that are more example based, and it would be helpful to test many combinations of\nparameters."),Object(i.b)("p",null,"In these situations, ",Object(i.b)("strong",{parentName:"p"},"data driven testing")," (also called table driven testing) is an easy technique to avoid tedious\nboilerplate."),Object(i.b)("p",null,"Kotest has first class support for data driven testing built into the framework.\nThis means Kotest will automatically generate test case entries, based on input values provided by you."),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"Let's consider writing tests for a ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Pythagorean_triple"}),"pythagorean triple")," function that\nreturns true if the input values are valid triples (",Object(i.b)("em",{parentName:"p"},"a squared + b squared = c squared"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-kotlin"}),"fun isPythagTriple(a: Int, b: Int, c: Int): Boolean = a * a + b * b == c * c\n")),Object(i.b)("p",null,"Since we need more than one element per row (we need 3), we start by definining a data class that will hold a single ",Object(i.b)("em",{parentName:"p"},"\nrow")," of values (in our case, the two inputs, and the expected result)."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-kotlin"}),"data class PythagTriple(val a: Int, val b: Int, val c: Int)\n")),Object(i.b)("p",null,"We will create tests by using instances of this data class, passing them into the ",Object(i.b)("inlineCode",{parentName:"p"},"withData")," function, which also\naccepts a lambda that performs the test logic for that given ",Object(i.b)("em",{parentName:"p"},"row"),"."),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-kotlin"}),'class MyTests : FunSpec({\n  context("Pythag triples tests") {\n    withData(\n      PythagTriple(3, 4, 5),\n      PythagTriple(6, 8, 10),\n      PythagTriple(8, 15, 17),\n      PythagTriple(7, 24, 25)\n    ) { (a, b, c) ->\n      isPythagTriple(a, b, c) shouldBe true\n    }\n  }\n})\n')),Object(i.b)("p",null,"Notice that because we are using data classes, the input row can be destructured into the member properties.\nWhen this is executed, we will have 4 test cases in our input, one for each input row."),Object(i.b)("p",null,"Kotest will automatically generate a test case for each input row, as if you had manually written a seperate test case\nfor each."),Object(i.b)("p",null,Object(i.b)("img",{alt:"data test example output",src:a(220).default})),Object(i.b)("p",null,"The test names are generated from the data classes themselves but can be ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#custom-test-names"}),"customized"),"."),Object(i.b)("p",null,"If there is an error for any particular input row, then the test will fail and Kotest will output the values that\nfailed. For example, if we change the previous example to include the row ",Object(i.b)("inlineCode",{parentName:"p"},"PythagTriple(5, 4, 3)"),"\nthen that test will be marked as a failure."),Object(i.b)("p",null,Object(i.b)("img",{alt:"data test example output",src:a(221).default})),Object(i.b)("p",null,"The error message will contain the error and the input row details:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Test failed for (a, 5), (b, 4), (c, 3) expected:<9> but was:<41>")),Object(i.b)("p",null,"In that previous example, we wrapped the ",Object(i.b)("inlineCode",{parentName:"p"},"withData")," call in a parent test, so we have more context when the test results appear.\nThe syntax varies depending on the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/framework/testing-styles.html"}),"spec style")," used - here we used ",Object(i.b)("em",{parentName:"p"},"fun spec")," which uses context blocks for containers.\nIn fact, data tests can be nested inside any number of containers."),Object(i.b)("p",null,"But this is optional, you can define data tests at the root level as well."),Object(i.b)("p",null,"For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-kotlin"}),"class MyTests : FunSpec({\n  withData(\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    isPythagTriple(a, b, c) shouldBe true\n  }\n})\n")),Object(i.b)("h2",{id:"stable-names"},"Stable Names"),Object(i.b)("p",null,"When generating test names, Kotest needs a ",Object(i.b)("em",{parentName:"p"},"stable")," test name. Otherwise, test reports can be messed up if the name used\nchanges over the course of the test suite execution."),Object(i.b)("p",null,"Kotest will only use the ",Object(i.b)("inlineCode",{parentName:"p"},"toString()")," of the input class if it thinks the input class has a stable ",Object(i.b)("inlineCode",{parentName:"p"},"toString()")," value\notherwise it will use the class name."),Object(i.b)("p",null,"You can force Kotest to use the ",Object(i.b)("inlineCode",{parentName:"p"},"toString()")," for test names by annotating your type with ",Object(i.b)("inlineCode",{parentName:"p"},"@IsStableType"),". Then\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"toString()")," will be used regardless."),Object(i.b)("p",null,"Alternatively, you can completely customize the display name of the test.\nSee ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/framework/datatesting/custom-test-names.html"}),"customing test names"),"."))}p.isMDXComponent=!0},159:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(a),d=n,m=b["".concat(s,".").concat(d)]||b[d]||u[d]||i;return a?r.a.createElement(m,o(o({ref:t},l),{},{components:a})):r.a.createElement(m,o({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},220:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/datatest1-55f0023d0e24fd14ff7081a3746e32ef.png"},221:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/datatest2-caababc9c261775d74c2c236cbf23686.png"}}]);